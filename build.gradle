plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'com.modrinth.minotaur' version '1.2.1'
	id 'java'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	maven {
		name 'AperLambda'
		url 'https://aperlambda.github.io/maven'
	}
	maven {
		name 'Gegy'
		url 'https://maven.gegy.dev'
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://maven.saps.dev/minecraft' }
	maven { url 'https://maven.shedaniel.me/' }
}

minecraft {
	accessWidener 'src/main/resources/cmt.accesswidener'
}

dependencies {
	minecraft "com.mojang:minecraft:$minecraft_version"
	mappings "net.fabricmc:yarn:$yarn_mappings:v2"
	modImplementation "net.fabricmc:fabric-loader:$loader_version"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"

	// --- lib dependencies ---
	implementation "blue.endless:jankson:$jankson_version"

	// --- mod dependencies ---
	// cloth config
	modApi("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	// modmenu
	modImplementation "com.terraformersmc:modmenu:$modmenu_version"

	// cardinal components
	include modImplementation( "io.github.onyxstudios:Cardinal-Components-API:$cca_version" )

	// GUI
	include modImplementation( "dev.lambdaurora:spruceui:$spruceui_version" )
	//	include "dev.lambdaurora:spruceui:$spruceui_version"

	// --- compat/integration dependencies ---
	// KubeJS
	modRuntime "dev.latvian.mods:kubejs-fabric:$kubejs_version"
}

processResources {
	inputs.property 'version', project.version

	duplicatesStrategy = DuplicatesStrategy.INCLUDE

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

jar {
	from 'LICENSE'
}

import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType
import static com.modrinth.minotaur.request.Dependency.DependencyType
import java.nio.file.Files

task publishModrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
	dependsOn build
	onlyIf {
		// Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
		System.getenv('MODRINTH')
	}

	// An environment property called MODRINTH that is your token
	token = System.getenv('MODRINTH')
	projectId = 'wF41lyyi'
	// Will fail if Modrinth has this version already
	versionNumber = project.version
	// This is the java jar task.
	// If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
	uploadFile = remapJar
	// --- METADATA ---
	// add loader
	addLoader('fabric')
	// add dependencies
	Version ver = getVersionData()
	versionName = ver.name
	changelog = ver.changelog
	versionType = VersionType.valueOf(ver.type)
	// Add game versions
	for ( String mcVer : ver.mcVersions ) {
		addGameVersion(mcVer)
	}

}

class Version {
	String name, changelog = "", type = "RELEASE"
	List<String> mcVersions
}


Version getVersionData() {
	// version changelog data
	var version = project.version
	var verObj = new Version()
	verObj.name = version
	// working vars
	var verFound = false
	List<String> lines
	// read file
	try {
		lines = Files.readAllLines(
				java.nio.file.Path.of("C:/Users/Flavia/Documents/minecraft modding/CustomMapsToolsFAB/changelog")
		)
	} catch (IOException e) {
		e.printStackTrace()
		lines = new ArrayList<String>()
	}
	// get changelog and version name
	for ( String line : lines ) {
		if ( line.startsWith("version") ) {
			verFound = line.replace("version ", "") == version
		}
		if ( line.startsWith("\t") && verFound ) {
			// remove tab
			line = line.replaceFirst("\t", "")
			if ( line.startsWith("name: ") ) {
				verObj.name = line.replaceFirst("name: ", "")
			} else if ( line.startsWith("type: ") ) {
				// can be alpha, beta or release
				verObj.type = line.replaceFirst("type: ", "").toUpperCase()
			} else if ( line.startsWith("mcversion: ") ) {
				// split mc versions
				verObj.mcVersions = ArrayList.of( line.replaceFirst("mcVersions: ", "").split(" ") )
			} else {
				verObj.changelog = verObj.changelog + line + "<br>"
			}
		}
	}
	return verObj
}
